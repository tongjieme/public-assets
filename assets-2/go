package main
 import (
	"fmt"
	"log"
	"net/http"
	"strings"
 	"github.com/jcmturner/gokrb5/v8/client"
	"github.com/jcmturner/gokrb5/v8/config"
	"github.com/jcmturner/gokrb5/v8/credentials"
	"github.com/jcmturner/gokrb5/v8/keytab"
)
 func main() {
	// Load the Kerberos configuration
	krbConfig, err := config.Load("/etc/krb5.conf")
	if err != nil {
		log.Fatal(err)
	}
 	// Load the keytab file
	kt, err := keytab.Load("/path/to/keytab")
	if err != nil {
		log.Fatal(err)
	}
 	// Create a Kerberos client
	cl := client.NewClientWithKeytab("username", "REALM", kt)
 	// Create an HTTP handler to retrieve the user ID
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		// Authenticate the user using Kerberos
		err := cl.Login()
		if err != nil {
			http.Error(w, err.Error(), http.StatusUnauthorized)
			return
		}
 		// Extract the user ID from the authenticated principal
		principal := strings.Split(cl.Credentials.Client.PrincipalName().String(), "@")[0]
 		// Respond with the user ID
		fmt.Fprintf(w, "User ID: %s", principal)
	})
 	// Start the HTTP server
	log.Fatal(http.ListenAndServe(":8080", nil))
}
