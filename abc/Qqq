import java.util.List;
import java.util.ArrayList;
import java.util.concurrent.*;

public class ParallelFunctionsExecution {
  public static void main(String[] args) throws InterruptedException {
    // Creating a list of Runnable tasks.
    List<Runnable> tasks = new ArrayList<>();

    tasks.add(() -> {
      // Task1 starts
      // your code here
      System.out.println("Task 1 completed");
    });

    tasks.add(() -> {
      // Task2 starts
      // your code here
      System.out.println("Task 2 completed");
    });

    // add more tasks if you want...

    executeParallel(tasks);
  }

  public static void executeParallel(List<Runnable> tasks) throws InterruptedException {
    // Using ExecutorService to create a thread pool.
    ExecutorService executorService = Executors.newFixedThreadPool(tasks.size());

    try {
      // Transform Runnables into Callable<Void> with Executors.callable method
      List<Callable<Void>> callables = tasks.stream()
         .map(task -> Executors.callable(task, (Void) null))
         .collect(Collectors.toList());

      executorService.invokeAll(callables);
    } finally {
      // Always remember to shut down the executor service.
      executorService.shutdown();
    }
  }
}
