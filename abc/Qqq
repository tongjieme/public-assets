public <T> T deserializeObject(Class<T> type, String filePath) {
    T obj = null;
    try {
        FileInputStream file = new FileInputStream(filePath);
        ObjectInputStream in = new ObjectInputStream(file);

        obj = type.cast(in.readObject());

        in.close();
        file.close();
    } catch (IOException ex) {
        System.out.println("IOException occurred");
        ex.printStackTrace();
    } catch (ClassNotFoundException ex) {
        System.out.println("ClassNotFoundException occurred");
        ex.printStackTrace();
    }
    return obj;
}








import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.Base64;


public String serializeObjectToBase64(Object obj) {
    String base64Str = null;
    try {
        // Create a ByteArrayOutputStream
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        // Wrap the ByteArrayOutputStream with an ObjectOutputStream
        ObjectOutputStream objOut = new ObjectOutputStream(out);
        // Write object to stream
        objOut.writeObject(obj);
        // Convert the serialized object into a byte array
        byte[] byteArray = out.toByteArray();
        // Convert the byte array to a Base64 encoded string
        base64Str = Base64.getEncoder().encodeToString(byteArray);
    } catch(IOException ex) {
        System.out.println("IOException occurred");
        ex.printStackTrace();
    }
    return base64Str;
}







import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.Base64;
public <T> T unserializeBase64ToObject(Class<T> type, String base64Str) {
    T obj = null;
    try {
        // Convert the Base64 string back to a byte array
        byte[] byteArray = Base64.getDecoder().decode(base64Str);
        
        // Create a ByteArrayInputStream
        ByteArrayInputStream bis = new ByteArrayInputStream(byteArray);
        
        // Wrap the ByteArrayInputStream with an ObjectInputStream
        ObjectInputStream in = new ObjectInputStream(bis);
        
        // Read the object and cast it to the provided type
        obj = type.cast(in.readObject());

    } catch(IOException ex) {
        System.out.println("IOException occurred");
        ex.printStackTrace();
    } catch (ClassNotFoundException ex) {
        System.out.println("ClassNotFoundException occurred");
        ex.printStackTrace();
    }
    return obj;
}
