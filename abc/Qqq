import React, {useCallback, useEffect, useMemo, useRef, useState} from "react";
import {AgGridReact} from "ag-grid-react";

import 'ag-grid-enterprise';
import 'ag-grid-community/styles/ag-grid.css'; // Core grid CSS, always needed
import 'ag-grid-community/styles/ag-theme-balham.css';
import LS from "../utils/LS.js";
import {Select, Button, Space, theme, Checkbox, Col, Row, Modal, Input} from "antd";
import {commify} from "../utils/utils.js";
import _ from "lodash"

/**
 *
 * @param data
 * @param defaultColDef
 * @param columnDefs
 * @param id
 * @param agOption ag-grid option {}
 * @param groups [{headerName: "", children: [{ field: 'athlete' }]}]
 * @param ColumnDescObj
 * @returns {JSX.Element}
 */
export default function ({data,defaultColDef,columnDefs, id, agOption, groups, ColumnDescObj}) {
    defaultColDef = defaultColDef || {}
    agOption = agOption || {}
    groups = groups || []
    let _columnDefs = columnDefs || []
    let _ColumnDescObj = ColumnDescObj || {value: "", setter: () => {}, isDummy: true}
    const gridRef = useRef(); // Optional - for accessing Grid's API
    const [rowData, setRowData] = useState(); // Set rowData to Array of Objects, one Object per Row
    const [Lowercase, setLowerCase] = useState(true);
    const [ColumnDefs, setColumnDefs] = useState([]);
    const [ColOverrides, setColOverrides] = useState([])

    const [AddDescFieldName, setAddDescFieldName] = useState("");
    const [AddDescFieldNDesc, setAddDescFieldDesc] = useState("");
    const [ShowDescBrowser, setShowDescBrowser] = useState(false);

    const [DescObj, setDescObj] = useState({})
    useEffect(() => {
        try {
            let parse = JSON.parse(_ColumnDescObj.value);
            setDescObj(parse)
        } catch (e) {

        }
    }, [_ColumnDescObj.value])



    const sideBar = useMemo(() => {
        return {
            toolPanels: [
                {
                    id: 'columns',
                    labelDefault: 'Columns',
                    labelKey: 'columns',
                    iconKey: 'columns',
                    toolPanel: 'agColumnsToolPanel',
                    minWidth: 225,
                    maxWidth: 225,
                    width: 225
                },
                {
                    id: 'filters',
                    labelDefault: 'Filters',
                    labelKey: 'filters',
                    iconKey: 'filter',
                    toolPanel: 'agFiltersToolPanel',
                    minWidth: 180,
                    maxWidth: 400,
                    width: 250
                }
            ],
            position: 'right',
            // defaultToolPanel: 'columns',
            // hiddenByDefault: false
        };
    }, []);

    // Each Column Definition results in one Column.

    // DefaultColDef sets props common to all Columns
    const _defaultColDef = useMemo( ()=> {
        let DescObj = {};
        if(_ColumnDescObj.value) {
            try {
                DescObj = JSON.parse(_ColumnDescObj.value);
            } catch (e) {

            }
        }

        return {
            sortable: true,
            filter: true,
            resizable: true,
            headerValueGetter: Lowercase ? ({column}) => {
                let fieldName = column.getColDef().field + "";
                if(DescObj[fieldName]) {
                    return fieldName.toLowerCase() + "*";
                }
                return fieldName.toLowerCase();
            } : undefined,
            ...defaultColDef
        }
    }, [Lowercase, _ColumnDescObj.value]);



    // Example load data from server
    useEffect(() => {
        let columns = [{a: ""}]
        let newColumns = []
        if(data.length) {
            columns = Object.keys(data[0]).map(ColumnName => {

                let columnDefOption = {};

                _columnDefs.map(c => {
                    if(ColumnName === c.field) {
                        columnDefOption = c;
                    }
                })
                ColOverrides.map(c => {
                    if(ColumnName === c.field) {
                        columnDefOption = {...columnDefOption, ...c};
                    }
                })
                let col = {
                    field: ColumnName,
                    enablePivot: true,
                    enableRowGroup: true,
                    ...columnDefOption
                }

                if(typeof data[0][ColumnName] === "number") {
                    col.enableValue = true
                    col.filter = 'agNumberColumnFilter'
                    col.cellStyle = { fontFamily: "Arial, sans-serif" }
                    col.type = 'rightAligned'
                }
                return col
            })
            _columnDefs.map(c => {
                let isNewColumn = true
                columns.map(col => {
                    if(col.field === c.field) {
                        isNewColumn = false
                    }
                })
                if (isNewColumn) {
                    newColumns.push(c)
                }
            })
        }

        // groups.map(g => {
        //     let headerName = g.headerName;
        //     let children = g.children
        //     children.map(c => {
        //         let index = _.findIndex(columnDefs, c => c.field.toLowerCase() === c.field.toLowerCase());
        //
        //     })
        //
        // })

        setColumnDefs([...columns, ...newColumns])
        setRowData(data)
        // applyColumnState()
    }, [data, ColOverrides, columnDefs]);

    // Example using Grid's API
    // const buttonListener = useCallback( e => {
    //     gridRef.current.api.deselectAll();
    // }, []);

    const statusBar = useMemo(() => {
        return {
            statusPanels: [
                { statusPanel: 'agTotalAndFilteredRowCountComponent', align: 'left' },
                { statusPanel: 'agTotalRowCountComponent', align: 'center' },
                { statusPanel: 'agFilteredRowCountComponent' },
                { statusPanel: 'agSelectedRowCountComponent' },
                { statusPanel: 'agAggregationComponent' },
            ],
        };
    }, []);

    const CustomCountRenderer = (props) => {
        const { value } = props;
        const count = value && value.length;

        return <span> count: {count}</span>
        // return <span>({count} items)</span>;
    }


    const saveColumnState = function () {
        if(gridRef.current.columnApi) {
            console.log("saveColumnState")
            if(id) {
                LS.set("GRID_COLUMN_STATE_" + id, gridRef.current.columnApi.getColumnState())
            }
        }
    }
    const applyColumnState = function () {
        if(gridRef.current.columnApi) {
            console.log("applyColumnState")
            let newVar = LS.get("GRID_COLUMN_STATE_" + id);
            if(newVar && gridRef.current && gridRef.current.columnApi) {
                gridRef.current.columnApi.applyColumnState({
                    state: newVar,
                    applyOrder: true,
                })
            }
        }
    }

    const onStateChange = function(event) {
        // Handle column state change
        // saveColumnState()
    }

    const autoGroupColumnDef = useMemo(() => {
        return {
            // headerName: 'My Group',
            // minWidth: 220,
            pinned: 'left',//force pinned left. Does not work in columnDef
            resizable: true,
            cellRendererParams: {
                suppressCount: true,
                // cellRendererFramework: CustomCountRenderer, // Custom cell renderer component
                // checkbox: true,
            },
        };
    }, []);


    // Example of consuming Grid Event
    const cellClickedListener = useCallback( event => {
        console.log('cellClicked', event);
    }, []);

    const addDesc = function (fieldName, desc){
        let descObj = {}

        if(_ColumnDescObj.value) {
            try {
                descObj = JSON.parse(_ColumnDescObj.value)
            } catch (e) {

            }
        }

        descObj[fieldName] = desc;

        _ColumnDescObj.setter(JSON.stringify(descObj))
    }


    const onGridReady = function () {
        // applyColumnState()
    }
    const { token } = theme.useToken();


    const getMainMenuItems = function (params) {
        let field = params.column.getId();
        console.log(field, params)


        return [
            ...params.defaultItems,
            {
                name: 'Joe Abercrombie',
                action: () => {
                    console.log('He wrote a book');
                },
                icon: '<img src="https://www.ag-grid.com/example-assets/lab.png" style="width: 14px;" />',
            },
            {
                name: 'Format to xxx,xxx.00',
                action: () => {
                    if (gridRef.current.api) {
                        let columns = gridRef.current.api.getColumnDefs();
                        let _columnsDefs = columns.map(colDef => {
                            if (colDef.field === field){
                                colDef.valueFormatter = formaterComify
                                colDef.type = "rightAligned"
                                colDef.valueGetter = getIfNumber(field)
                                colDef.filter = "agNumberColumnFilter"
                                colDef.cellStyle = { fontFamily: "Arial, sans-serif" }
                            }
                            return colDef
                        });
                        setColumnDefs(_columnsDefs)
                    }
                    // console.log('He wrote a book');
                },
                icon: '<img src="https://www.ag-grid.com/example-assets/lab.png" style="width: 14px;" />',
            },
            {
                name: 'Reset Format',
                action: () => {
                    let newColumnsDefs = [...ColumnDefs]
                    newColumnsDefs.push({
                        field: field,
                        valueFormatter: params => params.value,
                        // type: 'leftAligned'
                    })

                    setColOverrides(newColumnsDefs)
                },
                icon: '<img src="https://www.ag-grid.com/example-assets/lab.png" style="width: 14px;" />',
            },
            {
                name: 'Show Description',
                action: () => {
                    if (gridRef.current.api && !_ColumnDescObj.isDummy) {
                        console.log(field)
                        // addDesc(field, "TEST")
                        // setShowAddDesc(true)
                        setAddDescFieldName(field)
                        setShowDescBrowser(true)
                        setAddDescFieldDesc(DescObj[field])
                    }
                },
                icon: '<img src="https://www.ag-grid.com/example-assets/lab.png" style="width: 14px;" />',
            },
        ]
        // return params.defaultItems;
    }
    const topConlumn = function (field){
        if(gridRef.current.columnApi) {
            gridRef.current.columnApi.moveColumns([field], 0)
        }
    }
    const ensureColumnVisible = function (field){
        if(gridRef.current.api) {
            gridRef.current.api.ensureColumnVisible(field, 'end')
        }
    }
    const filterOption = (input, option) =>
        (option?.label ?? '').toLowerCase().includes(input.toLowerCase());
    return (
        <div>

            {/* Example using Grid's API */}
            {/*<button onClick={buttonListener}>Push Me</button>*/}

            {/* On div wrapping Grid a) specify theme CSS Class Class and b) sets Grid size */}

            <Row gutter={10}>
                <Col span={6}>
                    <Select style={{width: "100%"}} showSearch options={ColumnDefs.map(c => {
                        return {
                            value: c.field,
                            label: Lowercase ? (c.field + "").toLowerCase() : c.field,
                        }
                    })} filterOption={filterOption} onChange={topConlumn}></Select>
                </Col>
                <Col span={6}>
                    <Select style={{width: "100%"}} showSearch options={ColumnDefs.map(c => {
                        return {
                            value: c.field,
                            label: Lowercase ? (c.field + "").toLowerCase() : c.field,
                        }
                    })} filterOption={filterOption} onChange={ensureColumnVisible}></Select>
                </Col>
                <Col span={6}><Checkbox checked={Lowercase} onChange={e =>{setLowerCase(e.target.checked)} }>Lowercase</Checkbox></Col>
            </Row>

            <div className="ag-theme-balham" style={{width: "100%", height: "90vh"}} key={JSON.stringify(columnDefs)}>

                {/*<Space style={{paddingBottom: token.paddingXS}}>*/}
                {/*    <Button type="primary" onClick={saveColumnState}>Save</Button>*/}
                {/*    <Button onClick={applyColumnState}>apply</Button>*/}
                {/*</Space>*/}


                <AgGridReact
                    ref={gridRef} // Ref for accessing Grid's API

                    rowData={rowData} // Row Data for Rows
                    enableRangeSelection={true}
                    statusBar={statusBar}
                    sideBar={sideBar}
                    maintainColumnOrder={true}

                    columnDefs={ColumnDefs} // Column Defs for Columns
                    defaultColDef={_defaultColDef} // Default Column Properties

                    animateRows={true} // Optional - set to 'true' to have rows animate when sorted
                    rowSelection='multiple' // Options - allows click selection of rows
                    autoGroupColumnDef={autoGroupColumnDef}
                    onCellClicked={cellClickedListener} // Optional - registering for Grid Event
                    groupDefaultExpanded={0}
                    onColumnMoved={onStateChange}
                    onFilterChanged={onStateChange}
                    onSortChanged={onStateChange}
                    onGridReady={onGridReady}
                    onRowDataUpdated={applyColumnState}
                    getMainMenuItems={getMainMenuItems}
                    {...agOption}
                />
            </div>
            <Modal title={"Desc Browser"} open={ShowDescBrowser} onOk={() =>{
                addDesc(AddDescFieldName, AddDescFieldNDesc)
                setShowDescBrowser(false)
            } } onCancel={() =>{setShowDescBrowser(false)} }>
                <Select style={{width: "100%"}} showSearch options={Object.keys(DescObj).map(c => {
                    return {
                        value: c,
                        label: Lowercase ? (c + "").toLowerCase() : c,
                    }
                })} filterOption={filterOption} onChange={field => {
                    setAddDescFieldDesc(DescObj[field])
                    setAddDescFieldName(field)
                }}></Select>
                <p>{AddDescFieldName}</p>
                <Input.TextArea value={AddDescFieldNDesc} onChange={e => {
                    setAddDescFieldDesc(e.target.value)
                }}></Input.TextArea>
            </Modal>
        </div>
    );
}

function formaterComify(params) {
    return commify(params.value, 2)
}
function getIfNumber(FieldName) {
    return function (params) {
        if(params.data) {
            let n = params.data[FieldName]
            if (typeof n === "string") {
                let number = parseFloat(n)
                if (!isNaN(number)) {
                    n = number
                }
            }
            return n
        }
        return undefined
    }
}
