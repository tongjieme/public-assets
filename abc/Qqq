const fs = require('fs');
const path = require('path');

const projectDirectory = '/path/to/spring/boot/project';
const controllersDirectory = path.join(projectDirectory, 'src/main/java/com/example/controllers');

function scanDirectory(directoryPath, fileList = []) {
  const files = fs.readdirSync(directoryPath);

  files.forEach((file) => {
    const filePath = path.join(directoryPath, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      scanDirectory(filePath, fileList);
    } else if (path.extname(file) === '.java') {
      fileList.push(filePath);
    }
  });

  return fileList;
}

function extractUrlsFromJavaFiles(javaFiles) {
  const urlRegexes = [
    /@RequestMapping\("(.+?)"\)/g,
    /@GetMapping\("(.+?)"\)/g,
    /@PostMapping\("(.+?)"\)/g,
    /@PutMapping\("(.+?)"\)/g,
    /@DeleteMapping\("(.+?)"\)/g,
    /@PatchMapping\("(.+?)"\)/g
  ];
  const urls = [];

  javaFiles.forEach((file) => {
    const fileContent = fs.readFileSync(file, 'utf8');

    urlRegexes.forEach((urlRegex) => {
      let match;

      while ((match = urlRegex.exec(fileContent)) !== null) {
        urls.push(match[1]);
      }
    });
  });

  return urls;
}

const javaFiles = scanDirectory(controllersDirectory);
const urls = extractUrlsFromJavaFiles(javaFiles);
console.log('Web Controller URLs:');
urls.forEach((url) => {
  console.log(url);
});
