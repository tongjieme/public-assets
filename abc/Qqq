function extractUrlsFromJavaFiles(javaFiles) {
    const annotationRegexes = [
        { name: '@RequestMapping', regex: /@RequestMapping\(path\s*=\s*"(.+?)".*?method\s*=\s*RequestMethod\.([A-Z]+).*?\)\s*public/g },
        { name: '@GetMapping', regex: /@GetMapping\("(.+?)"\)/g },
        { name: '@PostMapping', regex: /@PostMapping\("(.+?)"\)/g },
        { name: '@PutMapping', regex: /@PutMapping\("(.+?)"\)/g },
        { name: '@DeleteMapping', regex: /@DeleteMapping\("(.+?)"\)/g },
        { name: '@PatchMapping', regex: /@PatchMapping\("(.+?)"\)/g },
    ];
    
    const urls = [];

    javaFiles.forEach((file) => {
        const fileContent = fs.readFileSync(file, 'utf8');

        annotationRegexes.forEach(({ name, regex }) => {
            let match;

            while ((match = regex.exec(fileContent)) !== null) {
                if(match[2]) {
                    urls.push(`${name} ${match[1]} (Method: ${match[2]})`);
                } else {
                    urls.push(`${name} ${match[1]}`);
                }
            }
        });
    });

    return urls;
}

const javaFiles = scanDirectory(controllersDirectory);
const urls = extractUrlsFromJavaFiles(javaFiles);
console.log('Web Controller URLs:');
urls.forEach((url) => {
    console.log(url);
});
