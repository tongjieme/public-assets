const fs = require('fs');
const path = require('path');

const projectDirectory = '/path/to/spring/boot/project';
const controllersDirectory = path.join(projectDirectory, 'src/main/java/com/example/controllers');

function scanDirectory(directoryPath, fileList = []) {
  const files = fs.readdirSync(directoryPath);

  files.forEach((file) => {
    const filePath = path.join(directoryPath, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      scanDirectory(filePath, fileList);
    } else if (path.extname(file) === '.java') {
      fileList.push(filePath);
    }
  });

  return fileList;
}

function extractUrlsFromJavaFiles(javaFiles) {
    const classLevelAnnotationRegex = /(@RequestMapping\((?:path\s*=\s*)?"(.+?)"\)?\s*public\s+class\s+\w+\s*\{([^}]*)})/g;
    const methodLevelAnnotationRegexes = [
        {
            name: '@RequestMapping', 
            regex: /@RequestMapping\((?:path\s*=\s*)?"(.+?)(?:",\s*method\s*=\s*RequestMethod\.(.+?))?\)/g 
        },
        { name: '@GetMapping', regex: /@GetMapping\("(.+?)"\)/g },
        { name: '@PostMapping', regex: /@PostMapping\("(.+?)"\)/g },
        { name: '@PutMapping', regex: /@PutMapping\("(.+?)"\)/g },
        { name: '@DeleteMapping', regex: /@DeleteMapping\("(.+?)"\)/g },
        { name: '@PatchMapping', regex: /@PatchMapping\("(.+?)"\)/g },
    ];

    const allUrls = [];

    javaFiles.forEach(file => {
        const fileContent = fs.readFileSync(file, 'utf8');
        let classControllerMatches = [...fileContent.matchAll(classLevelAnnotationRegex)];

        classControllerMatches.forEach(classControllerMatch => {
            let classLevelUrl = classControllerMatch[2];
            let controllerBody = classControllerMatch[3];

            methodLevelAnnotationRegexes.forEach(({ name, regex }) => {
                let methodMatches = [...controllerBody.matchAll(regex)];
                methodMatches.forEach(methodMatch => {
                    const url = classLevelUrl + methodMatch[1];
                    const method = methodMatch[2] ? methodMatch[2] : 'GET'; 
                    allUrls.push(`${name} [${method}] ${url}`);
                });
            });
        });
    });

    return allUrls;
}

const javaFiles = scanDirectory(/*controllersDirectory*/);
const urls = extractUrlsFromJavaFiles(javaFiles);
console.log('Web Controller URLs:');
urls.forEach((url) => {
    console.log(url);
});
