const fs = require('fs');
const path = require('path');

const projectDirectory = '/path/to/spring/boot/project';
const controllersDirectory = path.join(projectDirectory, 'src/main/java/com/example/controllers');

function scanDirectory(directoryPath, fileList = []) {
  const files = fs.readdirSync(directoryPath);

  files.forEach((file) => {
    const filePath = path.join(directoryPath, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      scanDirectory(filePath, fileList);
    } else if (path.extname(file) === '.java') {
      fileList.push(filePath);
    }
  });

  return fileList;
}

function extractUrlsFromJavaFiles(javaFiles) {
  const annotationRegexes = [
    { name: '@RequestMapping', regex: /@RequestMapping\("(.+?)"\)/g },
    { name: '@GetMapping', regex: /@GetMapping\("(.+?)"\)/g },
    { name: '@PostMapping', regex: /@PostMapping\("(.+?)"\)/g },
    { name: '@PutMapping', regex: /@PutMapping\("(.+?)"\)/g },
    { name: '@DeleteMapping', regex: /@DeleteMapping\("(.+?)"\)/g },
    { name: '@PatchMapping', regex: /@PatchMapping\("(.+?)"\)/g },
  ];
  
  const urls = [];

  javaFiles.forEach((file) => {
    const fileContent = fs.readFileSync(file, 'utf8');

    annotationRegexes.forEach(({ name, regex }) => {
      let match;

      while ((match = regex.exec(fileContent)) !== null) {
        urls.push(`${name} ${match[1]}`);
      }
    });
  });

  return urls;
}

const javaFiles = scanDirectory(controllersDirectory);
const urls = extractUrlsFromJavaFiles(javaFiles);
console.log('Web Controller URLs:');
urls.forEach((url) => {
  console.log(url);
});
